(defwindow music
  :monitor 0 ;; Optional for X11
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry
              :width "15%"
              ;; :height "15%"
              ;;:x "50%"
              :y "2%"
              :anchor "top center")
  (music))

(defwindow bar
  :monitor 0 ;; Optional for X11
  :windowtype "dock"
  :geometry (geometry
              :width "100%"
              :height "3%"
              :x "0%"
              :y "0"
              :anchor "top center")
  (bar))

(defwidget music []
  (eventbox
    :onhoverlost "eww close music"
    (box :class "musicBox" :orientation "vertical"
      :valign "center"
      (label :text currentMusic)
      (scale :class "spotifyVolumeSlider" :value {spotifyVolume*100} :max 101 :draw-value true :onchange "./modules/spotifyVolume.sh {}")
      (box :class "buttonBox" :orientation "horizontal"
        :halign "center"
        (button :class "musicButton" :onclick "playerctl --player=spotify previous" "")
        (button :class "musicButton" :onclick "playerctl --player=spotify play-pause" {status == "Playing" ?  "" : ""} )
        (button :class "musicButton" :onclick "playerctl --player=spotify next" "")))))

(defwidget bar []
  (box
    (workspaces)
    (musicSummary)
    (box
      :halign "end"
      (systemInfo)
      (dateTime))))

(defwidget workspaces []
  (box
    :space-evenly false
    :halign "start"
    :class "workspaces"
    (for workspace in workspacesListener
      (eventbox :onclick "i3 workspace ${workspace.num}"
        (label :class "workspace" :text {workspace.visible == false ? "" : ""})))))

(defwidget systemInfo []
  (box
    :space-evenly false
    :halign "end"
    :class "systemInfo"
    (label :class "cpu" :text " ${round(EWW_CPU.avg, 2)}%")
    (label :class "ram" :text " ${round(EWW_RAM.used_mem/1000000000, 2)}/${round(EWW_RAM.total_mem/1000000000, 2)} GiB")))

(defwidget dateTime []
  (box
    :space-evenly false
    :halign "end"
    :class "dateTime"
    (label :class "time" :text " ${timePoll} |   ${datePoll}")))

(defwidget musicSummary []
  (eventbox
    :space-evenly false
    :halign "center"
    :class "musicSummary"
    :onhover "eww open music"
    (label :class "musicSummary" :text currentMusic)))

(deflisten currentMusic :initial "No Music"
  "playerctl --player=spotify --follow metadata --format ' {{artist}}: {{title}}'")

(deflisten currentMusicImage :initial "No Music"
  "playerctl --player=spotify --follow metadata | grep artUrl | awk '{ print $3 }'")

(deflisten status :initial "Playing"
  "playerctl --player=spotify --follow status")

(deflisten spotifyVolume :initial "playerctl --player=spotify volume"
  "playerctl --player=spotify --follow volume")

(deflisten workspacesListener
  "./modules/workspaces.sh")

(defpoll timePoll :interval "1s"
  "date +%H:%M")

(defpoll datePoll :interval "1m"
  "date +%d/%m/%Y")
